import { typeset } from './typeset.js'

export const shapes = new Map() // should be `Map<string, number[][]>` but it causes too many spurious errors due to possible undefined
export const shapesByCategory = new Map<string, string[]>()

export function setWithCategory(shapeName: string, category: string, shape: number[][]): void {
	shapes.set(shapeName, shape)
	const val = shapesByCategory.get(category)
	if (val === undefined) {
		shapesByCategory.set(category, [shapeName])
	} else {
		val.push(shapeName)
	}
}

// shift a shape along the x axis (columns)
export function shiftx(coords: number[][], offs: number): number[][] {
	return coords.map((bit) => [bit[0], bit[1] + offs])
}

export function shifty(coords: number[][], offs: number): number[][] {
	return coords.map((bit) => [bit[0] + offs, bit[1]])
}

export function shiftxy(coords: number[][], yoffs: number, xoffs: number): number[][] {
	return coords.map((bit) => [bit[0] + yoffs, bit[1] + xoffs])
}

export function transpose(coords: number[][]): number[][] {
	return coords.map((bit) => [bit[1], bit[0]])
}

export function hmirror(coords: number[][]): number[][] {
	const maxx = coords.reduce((maxval, newval) => Math.max(maxval, newval[1]), -Infinity)
	return coords.map((bit) => [bit[0], maxx - bit[1]])
}

export function vmirror(coords: number[][]): number[][] {
	const maxy = coords.reduce((maxval, newval) => Math.max(maxval, newval[0]), -Infinity)
	return coords.map((bit) => [maxy - bit[0], bit[1]])
}

export function shapeFromBitmap(bits: number[][]): number[][] {
	const result: number[][] = []
	for (let x = 0; x < bits.length; x++) {
		const rowVals = bits[x]
		for (let y = 0; y < rowVals.length; y++) {
			if (rowVals[y] > 0) {
				result.push([x, y])
			}
		}
	}
	return result
}

// *************** 10x11 board stats *****
// "G": 63
// wing: 66;
// conway video: 142
// glider TR & block methus: 146
// glider and blocks 1500 gets 200

//building blocks:
const block = shapeFromBitmap([
	[1, 1],
	[1, 1],
])

setWithCategory('point', ' point', [[0, 0]]) // it's in its own category.

setWithCategory(
	'S',
	'static',
	shapeFromBitmap([
		[1, 0, 1, 1],
		[1, 1, 0, 1],
	]),
)

setWithCategory('G (10x11 board)', '10x11', [
	[0, 0],
	[0, 1],
	[0, 2],
	[1, 0],
	[2, 0],
	[2, 2],
	[3, 0],
	[3, 2],
	[4, 0],
	[4, 1],
	[4, 2],
])

setWithCategory(
	'R-pentomino',
	'long-lived',
	shapeFromBitmap([
		[0, 1, 1],
		[1, 1, 0],
		[0, 1, 0],
	]),
)

// also relases several gliders:
setWithCategory(
	'B-heptomino',
	'medium-lived',
	shapeFromBitmap([
		[0, 1, 0, 0],
		[1, 1, 1, 0],
		[1, 0, 1, 1],
	]),
)

setWithCategory('B-hep x 2', 'long-lived', [...shapes.get('B-heptomino'), ...shiftxy(shapes.get('B-heptomino'), 7, 14)])

setWithCategory('JG sort of', 'symmetry', [
	[0, 0],
	[0, 1],
	[0, 2],
	[0, 4],
	[0, 5],
	[0, 6],
	[1, 2],
	[1, 4],
	[2, 0],
	[2, 2],
	[2, 4],
	[2, 6],
	[3, 0],
	[3, 2],
	[3, 4],
	[3, 6],
	[4, 0],
	[4, 1],
	[4, 2],
	[4, 4],
	[4, 5],
	[4, 6],
])

// Wikipedia lists three shapes of indefinite growth (on an infinite plane)
setWithCategory('indefinite1', 'long-lived', [
	[0, 0],
	[2, 0],
	[2, 1],
	[4, 2],
	[4, 3],
	[4, 4],
	[6, 3],
	[6, 4],
	[6, 5],
	[7, 4],
])

// also releases several gliders:
setWithCategory(
	'indefinite2',
	'long-lived',
	shapeFromBitmap([
		[1, 1, 1, 0, 1],
		[1, 0, 0, 0, 0],
		[0, 0, 0, 1, 1],
		[0, 1, 1, 0, 1],
		[1, 0, 1, 0, 1],
	]),
)

// can't get much out of this one on 55x30 and it's too long to transpose...
setWithCategory(
	'indefinite3',
	'symmetry',
	shapeFromBitmap([
		[
			1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
			1,
		],
	]),
)

// block the center from killing itself due to wraparound:
setWithCategory('indefinite3 mod', 'long-lived', [
	//1389 generations
	[-12, 13],
	[-12, 14],
	[-12, 15],
	...shapes.get('indefinite3'),
])

setWithCategory('indefinite3 mod2', 'long-lived', [
	//1644 (something else was 560) generations
	[-12, 13],
	[-12, 14],
	[-12, 15],
	[-11, 13],
	[-11, 14],
	[-11, 15],
	...shapes.get('indefinite3'),
	[12, 13],
	[12, 14],
	[12, 15],
	[13, 13],
	[13, 14],
	[13, 15],
])

setWithCategory('indefinite3 mod2b', 'long-lived', [
	//1833 generations
	[-12, 12],
	[-12, 13],
	[-12, 14],
	[-12, 15],
	[-12, 16],
	...shapes.get('indefinite3'),
	[13, 12],
	[13, 13],
	[13, 14],
	[13, 15],
	[13, 16],
])

setWithCategory('indefinite3 mod2c', 'long-lived', [
	//1008 generations
	[-12, 11],
	[-12, 12],
	[-12, 13],
	[-12, 14],
	[-12, 15],
	...shapes.get('indefinite3'),
	[13, 12],
	[13, 13],
	[13, 14],
	[13, 15],
	[13, 16],
])

// note: vertical of 10 form a recurring pattern (8 lasts 49 gen)
// entire height forms a recurring pattern of vertical lines
setWithCategory('vertical24', 'symmetry', shapeFromBitmap(new Array(24).fill([1]))) // 148 on a 30-row board; 28 gen with enough space
setWithCategory('horiz5', 'building-block', shapeFromBitmap([new Array(5).fill(1)])) //

setWithCategory('horiz5 x 5 ornamented', 'symmetry', [
	//553
	[0, 15],
	[0, 16],
	[0, 17],
	[1, 0],
	[1, 14],
	[1, 18],
	[1, 32],
	[2, 1],
	[2, 13],
	[2, 19],
	[2, 31],
	[3, 2],
	[3, 3],
	[3, 4],
	[3, 5],
	[3, 6],
	[3, 8],
	[3, 9],
	[3, 10],
	[3, 11],
	[3, 12],
	[3, 20],
	[3, 21],
	[3, 22],
	[3, 23],
	[3, 24],
	[3, 26],
	[3, 27],
	[3, 28],
	[3, 29],
	[3, 30],
	[10, 16],
	[11, 15],
	[11, 17],
	[12, 16],
])

setWithCategory('vert-horiz', 'long-lived', [
	...shapes.get('vertical24'),
	...shiftxy(transpose(shapes.get('vertical24')), 7, 13),
])

setWithCategory('horiz x 3', 'symmetry', [
	//660 gens with symmetry
	...transpose(shapes.get('vertical24')),
	...shifty(transpose(shapes.get('vertical24')), 8),
	...shifty(transpose(shapes.get('vertical24')), 15),
])
setWithCategory('robot', 'building-block', [
	[0, 1],
	[0, 2],
	[0, 3],
	[1, 0],
	[1, 4],
	[2, 1],
	[2, 3],
	[3, 1],
	[3, 3],
])

const robot = shapes.get('robot')

setWithCategory('robot x 5', 'medium-lived', [
	...robot,
	...shiftx(robot, 5 + 5 + 1),
	...shiftx(robot, 5 * 2 + 5 + 4 + 2),
	...shiftx(robot, 5 * 3 + 5 + 4 + 3 + 3),
	...shiftx(robot, 5 * 4 + 5 + 4 + 3 + 2 + 4),
])

setWithCategory('pi', 'symmetry', [
	[0, 0],
	[0, 1],
	[0, 2],
	[1, 0],
	[1, 2],
	[2, 0],
	[2, 2],
])

const pi = shapes.get('pi')

setWithCategory('pi x 5', 'long-lived', [
	// 1848 gen!
	...pi,
	...shiftx(pi, 3 + 5),
	...shiftx(pi, 3 * 2 + 5 + 4),
	...shiftx(pi, 3 * 3 + 5 + 4 + 3),
	...shiftx(pi, 3 * 4 + 5 + 4 + 3 + 2),
])

setWithCategory('acorn (methuselah)', 'long-lived', [
	// 537 gen
	[0, 1],
	[1, 3],
	[2, 0],
	[2, 1],
	[2, 4],
	[2, 5],
	[2, 6],
])

setWithCategory(
	'dove',
	'medium-lived',
	shapeFromBitmap([
		[0, 1, 1, 0, 0],
		[1, 0, 0, 1, 0],
		[0, 1, 0, 0, 1],
		[0, 0, 1, 1, 1],
	]),
)

const dove = shapes.get('dove')

setWithCategory('dove x 3', 'medium-lived', [...dove, ...shiftx(dove, 5 + 5), ...shiftx(dove, 5 * 2 + 5 + 4)])

setWithCategory('time bomb', 'medium-lived', [
	// 496 gen
	[0, 1],
	[0, 13],
	[0, 14],
	[1, 0],
	[1, 2],
	[1, 7],
	[1, 14],
	[2, 7],
	[2, 12],
	[3, 2],
	[3, 5],
	[3, 9],
	[3, 12],
	[4, 2],
	[4, 3],
	[4, 10],
	[5, 3],
])

setWithCategory(
	'rabbits',
	'medium-lived',
	shapeFromBitmap([
		[1, 0, 0, 0, 1, 1, 1],
		[1, 1, 1, 0, 0, 1, 0],
		[0, 1, 0, 0, 0, 0, 0],
	]),
)

// also release several gliders
setWithCategory('rabbits x 2', 'long-lived', [
	...shiftx(shapes.get('rabbits'), 19),
	...shifty(shapes.get('rabbits'), 9),
])

setWithCategory(
	'bunnies',
	'medium-lived',
	shapeFromBitmap([
		[1, 0, 0, 0, 0, 0, 1, 0],
		[0, 0, 1, 0, 0, 0, 1, 0],
		[0, 0, 1, 0, 0, 1, 0, 1],
		[0, 1, 0, 1, 0, 0, 0, 0],
	]),
)

setWithCategory('bunnies, transposed', 'medium-lived', transpose(shapes.get('bunnies')))

setWithCategory(
	'toaster',
	'continuous',
	shapeFromBitmap([
		[0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],
		[0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
		[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
		[0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0],
		[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
		[0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
		[1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
	]),
)

setWithCategory('toaster w/ guards', 'symmetry', [
	...shapes.get('toaster'),
	...shiftxy(block, -4, 5),
	...shiftxy(block, 13, 5),
])

setWithCategory('gliderBL', 'building-block', [
	[0, 1],
	[1, 0],
	[2, 0],
	[2, 1],
	[2, 2],
])
setWithCategory('gliderBL-form2', 'building-block', [
	[0, 0],
	[0, 2],
	[1, 0],
	[1, 1],
	[2, 1],
])

setWithCategory('gliderBR', 'building-block', [
	[0, 1],
	[1, 2],
	[2, 0],
	[2, 1],
	[2, 2],
])
setWithCategory('gliderTL', 'building-block', [
	[0, 0],
	[0, 1],
	[0, 2],
	[1, 0],
	[2, 1],
])
setWithCategory('gliderTR', 'building-block', [
	[0, 0],
	[0, 1],
	[0, 2],
	[1, 2],
	[2, 1],
])

setWithCategory('gliderBR and block -> pi', 'long-lived', [
	...shapes.get('gliderBR'),
	...shiftxy(block, 6, 2),
	// ...shiftxy(block, 5, 23),
	// ...shiftxy(block, 19, 23),
	// ...shiftxy(shapes.get("gliderBR"), 15, 21),
	// [17,20],
])

setWithCategory('gliderTR and block', 'symmetry', [...shifty(shapes.get('gliderTR'), 2), ...shiftx(block, 6)])
setWithCategory('gliderTR and block to beehive', 'short-lived', [
	...shifty(shapes.get('gliderTR'), 1),
	...shiftx(block, 6),
])
setWithCategory('gliderTR and block from bottom - big S', 'short-lived', [
	...shifty(shapes.get('gliderTR'), 3),
	...shiftx(block, 1),
])
setWithCategory('gliderTR and block methus.', 'long-lived', [...shifty(shapes.get('gliderTR'), 3), ...shiftx(block, 0)])
setWithCategory('gliderTR and block to pi.', 'long-lived', [...shifty(shapes.get('gliderTR'), 5), ...shiftx(block, 2)])

setWithCategory('gliders and blocks 1500', 'long-lived', [
	...shapes.get('gliderBR and block -> pi'),
	...shiftxy(shapes.get('gliderTR and block from bottom - big S'), 8, 23),
])

// generates glider and block after a show
setWithCategory(
	'wing',
	'building-block',
	shapeFromBitmap([
		[1, 1, 0, 0],
		[1, 0, 1, 0],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
	]),
)

setWithCategory('wing x 2', 'medium-lived', [...shiftx(shapes.get('wing'), 19), ...shifty(shapes.get('wing'), 11)])
setWithCategory('wing x 3', 'medium-lived', [
	...shiftx(shapes.get('wing'), 19),
	...shifty(shapes.get('wing'), 11),
	...shiftxy(shapes.get('wing'), 15, 25),
])
setWithCategory('wing x 3b (very long)', 'long-lived', [
	...shiftx(shapes.get('wing'), 19),
	...shifty(shapes.get('wing'), 11),
	...shiftxy(shapes.get('wing'), 14, 24), //34 is good too
])

// or symmetry?
setWithCategory('football', 'building-block', [
	[0, 1],
	[1, 0],
	[1, 1],
	[1, 2],
	[2, 0],
	[2, 2],
	[3, 1],
])

// interesting but short-lived, symmetry
setWithCategory(
	'Z-hexomino',
	'building-block',
	shapeFromBitmap([
		[1, 1, 0],
		[0, 1, 0],
		[0, 1, 0],
		[0, 1, 1],
	]),
)

// 2-step cycle
setWithCategory('barberpole', 'building-block', [
	[0, 0],
	[0, 1],
	[1, 0],
	[2, 1],
	[2, 3],
	[4, 3],
	[4, 5],
	[5, 6],
	[6, 5],
	[6, 6],
])

// Still-lifes

setWithCategory('block', 'static', block)

setWithCategory(
	'ship (still)',
	'static',
	shapeFromBitmap([
		[0, 1, 1],
		[1, 0, 1],
		[1, 1, 0],
	]),
)

setWithCategory(
	'loaf',
	'static',
	shapeFromBitmap([
		[0, 1, 0, 0],
		[1, 0, 1, 0],
		[1, 0, 0, 1],
		[0, 1, 1, 0],
	]),
)

setWithCategory('hive (vertical)', 'static', [
	[0, 1],
	[1, 0],
	[1, 2],
	[2, 0],
	[2, 2],
	[3, 1],
])

//  (static, eater)
setWithCategory(
	'fish hook',
	'static',
	shapeFromBitmap([
		[1, 1, 0, 0],
		[1, 0, 1, 0],
		[0, 0, 1, 0],
		[0, 0, 1, 1],
	]),
)

setWithCategory(
	'fish hook (inverted)',
	'static',
	shapes.get('fish hook').map((val: number[]) => [3 - val[0], val[1]]),
)
setWithCategory(
	'fish hook (reversed)',
	'static',
	shapes.get('fish hook').map((val: number[]) => [val[0], 3 - val[1]]),
)

setWithCategory('integral', 'static', [
	[0, 4],
	[0, 5],
	[1, 3],
	[1, 5],
	[2, 3],
	[3, 1],
	[3, 3],
	[4, 1],
	[4, 2],
])

setWithCategory(
	'H-H',
	'symmetry',
	shapeFromBitmap([
		[0, 0, 0, 1, 1, 1, 0],
		[0, 1, 1, 0, 1, 0, 1],
		[1, 0, 1, 0, 0, 0, 1],
		[1, 0, 0, 0, 1, 0, 1],
		[1, 0, 1, 0, 1, 1, 0],
		[0, 1, 1, 1, 0, 0, 0],
	]),
)

setWithCategory('H-H block', 'medium-lived', [
	...shifty(shapes.get('loaf'), 3),
	...shiftx(shapes.get('block'), 8),
	...shiftxy(shapes.get('H-H'), 4, 12),
])

setWithCategory(
	'freighter',
	'continuous',
	shapeFromBitmap([
		[0, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 1],
		[0, 0, 0, 0, 0, 0, 1],
		[0, 0, 0, 0, 0, 1, 0],
		[0, 0, 1, 1, 0, 0, 0],
	]),
)

setWithCategory('Herschel climber', 'long-lived', [
	//1429 on 40row, 1535 on 30row
	[12, 0],
	[13, 0],
	[13, 2],
	[14, 0],
	[14, 1],
	[14, 2],
	[15, 2],
	...shiftx(shapes.get('gliderBL-form2'), 15),
	...shiftx(shapes.get('loaf'), 32),
])

const gun = [
	[0, 0],
	[1, 0],
	[1, 1],
	[2, 1],
	[2, 2],
	[3, 0],
	[3, 1],
]

const gun1 = shiftx(gun, 17)
const gun_vrefl = gun.map((val) => [3 - val[0] + 7, val[1] + 17])

const gun_hrefl = gun.map((val) => [val[0] + 4, 2 - val[1] + 30])
const gun_hvrefl = gun.map((val) => [3 - val[0] + 11, 2 - val[1] + 30])

const gun_block1 = shifty(shapes.get('block'), 8) //.map((val:number[])=>[val[0]+8, val[1]])
const gun_block2 = shiftxy(shapes.get('block'), 5, 48)

setWithCategory('double gun', 'building-block', [
	...gun_block1,
	...gun1,
	...gun_hrefl,
	...gun_vrefl,
	...gun_hvrefl,
	...gun_block2,
])
setWithCategory('double gun, protected 30x55', 'continuous', [
	...shapes.get('double gun'),
	...shiftxy(shapes.get('fish hook (reversed)'), 23, 11),
	...shiftxy(shapes.get('fish hook (inverted)'), 18, 35),
])
setWithCategory('double gun protected 40x88', 'continuous', [
	...shapes.get('double gun'),
	...shifty(shapes.get('fish hook (inverted)'), 15),
	...shiftxy(shapes.get('fish hook (reversed)'), -4, 46),
])

setWithCategory('conway video', 'medium-lived', [
	[0, 6],
	[1, 4],
	[1, 6],
	[1, 7],
	[2, 4],
	[2, 6],
	[3, 4],
	[4, 2],
	[5, 0],
	[5, 2],
])

setWithCategory('boob', 'symmetry', [
	[0, 3],
	[1, 2],
	[1, 4],
	[2, 1],
	[2, 3],
	[2, 4],
	[3, 0],
	[3, 1],
	[3, 3],
	[3, 4],
	[4, 1],
	[4, 3],
	[4, 4],
	[5, 2],
	[5, 4],
	[6, 3],
])

setWithCategory('plunger', 'symmetry', [
	[0, 0],
	[0, 2],
	[1, 0],
	[1, 3],
	[2, 3],
	[2, 4],
	[3, 1],
	[3, 5],
	[3, 6],
	[4, 3],
	[4, 4],
	[5, 0],
	[5, 3],
	[6, 0],
	[6, 2],
])

const hook = [
	[0, 4],
	[0, 5],
	[1, 0],
	[1, 1],
	[1, 2],
	[1, 5],
	[2, 2],
	[2, 3],
	[2, 4],
	[2, 5],
	[3, 3],
	[3, 4],
]

setWithCategory('house + mask', 'long-lived', [
	// 2937 on a 40row board!
	...transpose(shapes.get('boob')),
	...shiftxy(transpose(shapes.get('plunger')), 1, 26),
])

setWithCategory('glider gun', 'building-block', [
	...shifty(shapes.get('block'), 5),
	...shiftxy(shapes.get('boob'), 2, 5),
	[2, 15],
	[3, 15],
	[4, 16],
	...shiftxy(hook, 5, 15),
	...shiftx(shapes.get('plunger'), 23),
	...shiftxy(shapes.get('block'), 3, 34),
])

setWithCategory(
	'gosper gun',
	'building-block',
	shapeFromBitmap([
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
		[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	]),
)

setWithCategory('glider gun 30x55', 'continuous', [
	...shapes.get('gosper gun'),
	...shiftxy(shapes.get('fish hook'), -4, 15),
])
setWithCategory('glider gun 40x88', 'continuous', [
	...shapes.get('gosper gun'),
	...shiftxy(shapes.get('fish hook'), -5, 1),
])

const gliderTL2 = [
	[0, 0],
	[0, 1],
	[1, 0],
	[1, 2],
	[2, 0],
]

setWithCategory('gun generator', 'curiosity', [
	...shifty(shapes.get('block'), 2),
	...shiftxy(shapes.get('ship (still)'), 2, 8),
	...shiftx(shapes.get('ship (still)'), 22),
	...shiftxy(shapes.get('gliderTL'), 2, 13),
	...shiftxy(shapes.get('gliderTL'), 5, 32),
	...shiftxy(gliderTL2, 9, 22),
	...shiftx(shapes.get('block'), 34),
])

// almost continously looping: ship grows the number of blinkers over time
setWithCategory(
	'blinker ship',
	'curiosity',
	shapeFromBitmap([
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1],
		[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1],
		[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1],
		[0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	]),
)

setWithCategory(
	'twin bees shuttle',
	'continuous',
	shapeFromBitmap([
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
		[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	]),
)

const marqueeSegment = [
	[0, 0],
	[1, 0],
	[1, 1],
	[1, 2],
	[7, 0],
	[7, 1],
	[7, 2],
	[8, 0],
]

const marqueeCar = [
	[3, 0],
	[3, 1],
	[3, 2],
	[4, 2],
	[4, 3],
	[5, 0],
	[5, 1],
	[5, 2],
]

setWithCategory('marquee center 55w', 'building-block', [
	...Array.from({ length: 7 }, (_val, idx) => shiftx(marqueeSegment, idx * 3)).flat(),
	...Array.from({ length: 4 }, (_val, idx) => shiftx(marqueeCar, idx * 5)).flat(),
])
setWithCategory('marquee center 88w', 'building-block', [
	...Array.from({ length: 17 }, (_val, idx) => shiftx(marqueeSegment, idx * 3)).flat(),
	...Array.from({ length: 10 }, (_val, idx) => shiftx(marqueeCar, idx * 5)).flat(),
])
setWithCategory('marquee center 45w', 'building-block', [
	...Array.from({ length: 15 }, (_val, idx) => shiftx(marqueeSegment, idx * 3)).flat(),
	...Array.from({ length: 9 }, (_val, idx) => shiftx(marqueeCar, idx * 5)).flat(),
])
setWithCategory('marquee center 45w reversed', 'building-block', hmirror(shapes.get('marquee center 45w')))

setWithCategory('marquee center 45w x 3', 'continuous', [
	...shapes.get('marquee center 45w'),
	...shiftxy(shapes.get('marquee center 45w reversed'), 8, 1),
	...shifty(shapes.get('marquee center 45w'), 16),
])

setWithCategory('marquee start', 'building-block', [
	[0, 7],
	[0, 13],
	[0, 14],
	[1, 5],
	[1, 6],
	[1, 7],
	[1, 13],
	[2, 4],
	[2, 10],
	[2, 11],
	[2, 13],
	[3, 5],
	[3, 7],
	[3, 8],
	[3, 9],
	[3, 10],
	[3, 13],
	[3, 15],
	[4, 4],
	[4, 5],
	[4, 7],
	[4, 12],
	[4, 14],
	[4, 16],
	[4, 19],
	[5, 9],
	[5, 10],
	[5, 11],
	[5, 12],
	[5, 16],
	[5, 17],
	[5, 18],
	[5, 19],
	[5, 20],
	[5, 21],
	[6, 0],
	[6, 1],
	[6, 4],
	[6, 5],
	[6, 6],
	[6, 7],
	[6, 8],
	[6, 9],
	[6, 13],
	[6, 15],
	[7, 0],
	[7, 3],
	[7, 7],
	[7, 8],
	[7, 12],
	[7, 14],
	[7, 15],
	[7, 17],
	[7, 18],
	[7, 19],
	[8, 1],
	[8, 3],
	[8, 11],
	[8, 14],
	[8, 19],
	[8, 20],
	[9, 0],
	[9, 1],
	[9, 3],
	[9, 7],
	[9, 8],
	[9, 9],
	[9, 11],
	[9, 12],
	[9, 15],
	[9, 17],
	[9, 18],
	[9, 19],
	[10, 4],
	[10, 5],
	[10, 6],
	[10, 7],
	[10, 8],
	[10, 9],
	[10, 12],
	[10, 14],
	[11, 12],
	[11, 15],
	[11, 16],
	[11, 17],
	[11, 18],
	[11, 19],
	[11, 20],
	[11, 21],
	[12, 6],
	[12, 7],
	[12, 8],
	[12, 9],
	[12, 10],
	[12, 11],
	[12, 12],
	[13, 6],
	[13, 17],
	[13, 18],
	[13, 19],
	[14, 9],
	[14, 10],
	[14, 17],
	[14, 20],
	[15, 9],
	[15, 10],
	[15, 19],
	[15, 20],
])

setWithCategory('marquee end', 'building-block', [
	...transpose(shapes.get('fish hook')),
	...shiftxy(transpose(shapes.get('horiz5')), 5, 4),
	...shiftxy(transpose(shapes.get('horiz5')), 5, 6),
	...shifty(transpose(shapes.get('fish hook (reversed)')), 11),
	[4, 1],
	[4, 3],
	[4, 5],
	[5, 2],
	[6, 0],
	[6, 2],
	[7, 7],
	[8, 0],
	[8, 2],
	[9, 2],
	[10, 1],
	[10, 3],
	[10, 5],
])

setWithCategory('marquee 55w', 'continuous', [
	...shapes.get('marquee start'),
	...shiftxy(shapes.get('marquee center 55w'), 4, 22),
	...shiftxy(shapes.get('marquee end'), 1, 22 + 20),
])

setWithCategory('marquee 88w', 'continuous', [
	...shapes.get('marquee start'),
	...shiftxy(shapes.get('marquee center 88w'), 4, 22),
	...shiftxy(shapes.get('marquee end'), 1, 22 + 50),
])

setWithCategory('marquee 88w, reversed', 'continuous', hmirror(shapes.get('marquee 88w')))

// ************ LETTERS ***************

setWithCategory('Hello World', 'demo', shapeFromBitmap(typeset('Hello\nWorld'))) // 1843 generations!

setWithCategory('Life', 'demo', shapeFromBitmap(typeset('Life')))

setWithCategory('Game of Life', 'demo', shapeFromBitmap(typeset('Game of Life')))

setWithCategory('Conway Game of Life', 'demo', shapeFromBitmap(typeset("  Conway's\nGame of Life")))

setWithCategory('ABC', 'demo', shapeFromBitmap(typeset("ABCDEFGHI\nJKLMNOPQR\nSTUVWXYZ'")))

setWithCategory('Life w/ Marquee', 'demo', [
	[0, 0],
	[0, 3],
	[0, 6],
	[0, 9],
	[0, 12],
	[0, 15],
	[0, 18],
	[0, 21],
	[0, 24],
	[0, 27],
	[0, 30],
	[0, 33],
	[0, 36],
	[0, 39],
	[0, 42],
	[1, 0],
	[1, 1],
	[1, 2],
	[1, 3],
	[1, 4],
	[1, 5],
	[1, 6],
	[1, 7],
	[1, 8],
	[1, 9],
	[1, 10],
	[1, 11],
	[1, 12],
	[1, 13],
	[1, 14],
	[1, 15],
	[1, 16],
	[1, 17],
	[1, 18],
	[1, 19],
	[1, 20],
	[1, 21],
	[1, 22],
	[1, 23],
	[1, 24],
	[1, 25],
	[1, 26],
	[1, 27],
	[1, 28],
	[1, 29],
	[1, 30],
	[1, 31],
	[1, 32],
	[1, 33],
	[1, 34],
	[1, 35],
	[1, 36],
	[1, 37],
	[1, 38],
	[1, 39],
	[1, 40],
	[1, 41],
	[1, 42],
	[1, 43],
	[1, 44],
	[3, 0],
	[3, 1],
	[3, 2],
	[3, 5],
	[3, 6],
	[3, 7],
	[3, 10],
	[3, 11],
	[3, 12],
	[3, 15],
	[3, 16],
	[3, 17],
	[3, 20],
	[3, 21],
	[3, 22],
	[3, 25],
	[3, 26],
	[3, 27],
	[3, 30],
	[3, 31],
	[3, 32],
	[3, 35],
	[3, 36],
	[3, 37],
	[3, 40],
	[3, 41],
	[3, 42],
	[4, 2],
	[4, 3],
	[4, 7],
	[4, 8],
	[4, 12],
	[4, 13],
	[4, 17],
	[4, 18],
	[4, 22],
	[4, 23],
	[4, 27],
	[4, 28],
	[4, 32],
	[4, 33],
	[4, 37],
	[4, 38],
	[4, 42],
	[4, 43],
	[5, 0],
	[5, 1],
	[5, 2],
	[5, 5],
	[5, 6],
	[5, 7],
	[5, 10],
	[5, 11],
	[5, 12],
	[5, 15],
	[5, 16],
	[5, 17],
	[5, 20],
	[5, 21],
	[5, 22],
	[5, 25],
	[5, 26],
	[5, 27],
	[5, 30],
	[5, 31],
	[5, 32],
	[5, 35],
	[5, 36],
	[5, 37],
	[5, 40],
	[5, 41],
	[5, 42],
	[7, 0],
	[7, 1],
	[7, 2],
	[7, 3],
	[7, 4],
	[7, 5],
	[7, 6],
	[7, 7],
	[7, 8],
	[7, 9],
	[7, 10],
	[7, 11],
	[7, 12],
	[7, 13],
	[7, 14],
	[7, 15],
	[7, 16],
	[7, 17],
	[7, 18],
	[7, 19],
	[7, 20],
	[7, 21],
	[7, 22],
	[7, 23],
	[7, 24],
	[7, 25],
	[7, 26],
	[7, 27],
	[7, 28],
	[7, 29],
	[7, 30],
	[7, 31],
	[7, 32],
	[7, 33],
	[7, 34],
	[7, 35],
	[7, 36],
	[7, 37],
	[7, 38],
	[7, 39],
	[7, 40],
	[7, 41],
	[7, 42],
	[7, 43],
	[7, 44],
	[8, 0],
	[8, 3],
	[8, 6],
	[8, 9],
	[8, 12],
	[8, 15],
	[8, 18],
	[8, 21],
	[8, 24],
	[8, 27],
	[8, 30],
	[8, 33],
	[8, 36],
	[8, 39],
	[8, 42],
	[12, 11],
	[12, 12],
	[12, 32],
	[12, 33],
	[13, 11],
	[13, 12],
	[13, 32],
	[13, 33],
	[14, 11],
	[14, 33],
	[15, 12],
	[15, 15],
	[15, 19],
	[15, 20],
	[15, 21],
	[15, 23],
	[15, 24],
	[15, 25],
	[15, 27],
	[15, 28],
	[15, 29],
	[15, 32],
	[16, 15],
	[16, 20],
	[16, 23],
	[16, 27],
	[17, 15],
	[17, 20],
	[17, 23],
	[17, 24],
	[17, 25],
	[17, 27],
	[17, 28],
	[17, 29],
	[18, 15],
	[18, 20],
	[18, 23],
	[18, 27],
	[19, 15],
	[19, 16],
	[19, 17],
	[19, 19],
	[19, 20],
	[19, 21],
	[19, 23],
	[19, 27],
	[19, 28],
	[19, 29],
])

setWithCategory('Life, Marque persists 30x45', 'demo', [
	[0, 0],
	[0, 3],
	[0, 6],
	[0, 9],
	[0, 12],
	[0, 15],
	[0, 18],
	[0, 21],
	[0, 24],
	[0, 27],
	[0, 30],
	[0, 33],
	[0, 36],
	[0, 39],
	[0, 42],
	[1, 0],
	[1, 1],
	[1, 2],
	[1, 3],
	[1, 4],
	[1, 5],
	[1, 6],
	[1, 7],
	[1, 8],
	[1, 9],
	[1, 10],
	[1, 11],
	[1, 12],
	[1, 13],
	[1, 14],
	[1, 15],
	[1, 16],
	[1, 17],
	[1, 18],
	[1, 19],
	[1, 20],
	[1, 21],
	[1, 22],
	[1, 23],
	[1, 24],
	[1, 25],
	[1, 26],
	[1, 27],
	[1, 28],
	[1, 29],
	[1, 30],
	[1, 31],
	[1, 32],
	[1, 33],
	[1, 34],
	[1, 35],
	[1, 36],
	[1, 37],
	[1, 38],
	[1, 39],
	[1, 40],
	[1, 41],
	[1, 42],
	[1, 43],
	[1, 44],
	[3, 0],
	[3, 1],
	[3, 2],
	[3, 5],
	[3, 6],
	[3, 7],
	[3, 10],
	[3, 11],
	[3, 12],
	[3, 15],
	[3, 16],
	[3, 17],
	[3, 20],
	[3, 21],
	[3, 22],
	[3, 25],
	[3, 26],
	[3, 27],
	[3, 30],
	[3, 31],
	[3, 32],
	[3, 35],
	[3, 36],
	[3, 37],
	[3, 40],
	[3, 41],
	[3, 42],
	[4, 2],
	[4, 3],
	[4, 7],
	[4, 8],
	[4, 12],
	[4, 13],
	[4, 17],
	[4, 18],
	[4, 22],
	[4, 23],
	[4, 27],
	[4, 28],
	[4, 32],
	[4, 33],
	[4, 37],
	[4, 38],
	[4, 42],
	[4, 43],
	[5, 0],
	[5, 1],
	[5, 2],
	[5, 5],
	[5, 6],
	[5, 7],
	[5, 10],
	[5, 11],
	[5, 12],
	[5, 15],
	[5, 16],
	[5, 17],
	[5, 20],
	[5, 21],
	[5, 22],
	[5, 25],
	[5, 26],
	[5, 27],
	[5, 30],
	[5, 31],
	[5, 32],
	[5, 35],
	[5, 36],
	[5, 37],
	[5, 40],
	[5, 41],
	[5, 42],
	[7, 0],
	[7, 1],
	[7, 2],
	[7, 3],
	[7, 4],
	[7, 5],
	[7, 6],
	[7, 7],
	[7, 8],
	[7, 9],
	[7, 10],
	[7, 11],
	[7, 12],
	[7, 13],
	[7, 14],
	[7, 15],
	[7, 16],
	[7, 17],
	[7, 18],
	[7, 19],
	[7, 20],
	[7, 21],
	[7, 22],
	[7, 23],
	[7, 24],
	[7, 25],
	[7, 26],
	[7, 27],
	[7, 28],
	[7, 29],
	[7, 30],
	[7, 31],
	[7, 32],
	[7, 33],
	[7, 34],
	[7, 35],
	[7, 36],
	[7, 37],
	[7, 38],
	[7, 39],
	[7, 40],
	[7, 41],
	[7, 42],
	[7, 43],
	[7, 44],
	[8, 0],
	[8, 3],
	[8, 6],
	[8, 9],
	[8, 12],
	[8, 15],
	[8, 18],
	[8, 21],
	[8, 24],
	[8, 27],
	[8, 30],
	[8, 33],
	[8, 36],
	[8, 39],
	[8, 42],
	[12, 11],
	[12, 12],
	[12, 32],
	[12, 33],
	[13, 11],
	[13, 12],
	[13, 32],
	[13, 33],
	[14, 11],
	[14, 33],
	[15, 12],
	[15, 15],
	[15, 19],
	[15, 20],
	[15, 21],
	[15, 23],
	[15, 24],
	[15, 25],
	[15, 27],
	[15, 28],
	[15, 29],
	[15, 32],
	[16, 15],
	[16, 20],
	[16, 23],
	[16, 27],
	[17, 15],
	[17, 20],
	[17, 23],
	[17, 24],
	[17, 25],
	[17, 27],
	[17, 28],
	[17, 29],
	[18, 15],
	[18, 20],
	[18, 23],
	[18, 27],
	[19, 15],
	[19, 16],
	[19, 17],
	[19, 19],
	[19, 20],
	[19, 21],
	[19, 23],
	[19, 27],
	[19, 28],
	[19, 29],
	[22, 15],
	[22, 16],
	[22, 21],
	[22, 22],
	[22, 28],
	[22, 29],
	[23, 15],
	[23, 16],
	[23, 21],
	[23, 22],
	[23, 28],
	[23, 29],
])

setWithCategory(
	'Life, Marque persists 27x45',
	'demo', // ends with 2 residues
	[
		[0, 27],
		[0, 28],
		[3, 0],
		[3, 3],
		[3, 6],
		[3, 9],
		[3, 12],
		[3, 15],
		[3, 18],
		[3, 21],
		[3, 24],
		[3, 27],
		[3, 30],
		[3, 33],
		[3, 36],
		[3, 39],
		[3, 42],
		[4, 0],
		[4, 1],
		[4, 2],
		[4, 3],
		[4, 4],
		[4, 5],
		[4, 6],
		[4, 7],
		[4, 8],
		[4, 9],
		[4, 10],
		[4, 11],
		[4, 12],
		[4, 13],
		[4, 14],
		[4, 15],
		[4, 16],
		[4, 17],
		[4, 18],
		[4, 19],
		[4, 20],
		[4, 21],
		[4, 22],
		[4, 23],
		[4, 24],
		[4, 25],
		[4, 26],
		[4, 27],
		[4, 28],
		[4, 29],
		[4, 30],
		[4, 31],
		[4, 32],
		[4, 33],
		[4, 34],
		[4, 35],
		[4, 36],
		[4, 37],
		[4, 38],
		[4, 39],
		[4, 40],
		[4, 41],
		[4, 42],
		[4, 43],
		[4, 44],
		[6, 0],
		[6, 1],
		[6, 2],
		[6, 5],
		[6, 6],
		[6, 7],
		[6, 10],
		[6, 11],
		[6, 12],
		[6, 15],
		[6, 16],
		[6, 17],
		[6, 20],
		[6, 21],
		[6, 22],
		[6, 25],
		[6, 26],
		[6, 27],
		[6, 30],
		[6, 31],
		[6, 32],
		[6, 35],
		[6, 36],
		[6, 37],
		[6, 40],
		[6, 41],
		[6, 42],
		[7, 2],
		[7, 3],
		[7, 7],
		[7, 8],
		[7, 12],
		[7, 13],
		[7, 17],
		[7, 18],
		[7, 22],
		[7, 23],
		[7, 27],
		[7, 28],
		[7, 32],
		[7, 33],
		[7, 37],
		[7, 38],
		[7, 42],
		[7, 43],
		[8, 0],
		[8, 1],
		[8, 2],
		[8, 5],
		[8, 6],
		[8, 7],
		[8, 10],
		[8, 11],
		[8, 12],
		[8, 15],
		[8, 16],
		[8, 17],
		[8, 20],
		[8, 21],
		[8, 22],
		[8, 25],
		[8, 26],
		[8, 27],
		[8, 30],
		[8, 31],
		[8, 32],
		[8, 35],
		[8, 36],
		[8, 37],
		[8, 40],
		[8, 41],
		[8, 42],
		[10, 0],
		[10, 1],
		[10, 2],
		[10, 3],
		[10, 4],
		[10, 5],
		[10, 6],
		[10, 7],
		[10, 8],
		[10, 9],
		[10, 10],
		[10, 11],
		[10, 12],
		[10, 13],
		[10, 14],
		[10, 15],
		[10, 16],
		[10, 17],
		[10, 18],
		[10, 19],
		[10, 20],
		[10, 21],
		[10, 22],
		[10, 23],
		[10, 24],
		[10, 25],
		[10, 26],
		[10, 27],
		[10, 28],
		[10, 29],
		[10, 30],
		[10, 31],
		[10, 32],
		[10, 33],
		[10, 34],
		[10, 35],
		[10, 36],
		[10, 37],
		[10, 38],
		[10, 39],
		[10, 40],
		[10, 41],
		[10, 42],
		[10, 43],
		[10, 44],
		[11, 0],
		[11, 3],
		[11, 6],
		[11, 9],
		[11, 12],
		[11, 15],
		[11, 18],
		[11, 21],
		[11, 24],
		[11, 27],
		[11, 30],
		[11, 33],
		[11, 36],
		[11, 39],
		[11, 42],
		[15, 11],
		[15, 12],
		[15, 21],
		[15, 22],
		[15, 32],
		[15, 33],
		[16, 11],
		[16, 12],
		[16, 21],
		[16, 22],
		[16, 32],
		[16, 33],
		[17, 11],
		[17, 33],
		[18, 12],
		[18, 15],
		[18, 19],
		[18, 20],
		[18, 21],
		[18, 23],
		[18, 24],
		[18, 25],
		[18, 27],
		[18, 28],
		[18, 29],
		[18, 32],
		[19, 15],
		[19, 20],
		[19, 23],
		[19, 27],
		[20, 15],
		[20, 20],
		[20, 23],
		[20, 24],
		[20, 25],
		[20, 27],
		[20, 28],
		[20, 29],
		[21, 15],
		[21, 20],
		[21, 23],
		[21, 27],
		[22, 15],
		[22, 16],
		[22, 17],
		[22, 19],
		[22, 20],
		[22, 21],
		[22, 23],
		[22, 27],
		[22, 28],
		[22, 29],
		[26, 27],
		[26, 28],
	],
)

// protects  27x45, ends with 3 residues including blinkers
// [[0,28],[0,29],[3,0],[3,3],[3,6],[3,9],[3,12],[3,15],[3,18],[3,21],[3,24],[3,27],[3,30],[3,33],[3,36],[3,39],[3,42],[4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],[4,9],[4,10],[4,11],[4,12],[4,13],[4,14],[4,15],[4,16],[4,17],[4,18],[4,19],[4,20],[4,21],[4,22],[4,23],[4,24],[4,25],[4,26],[4,27],[4,28],[4,29],[4,30],[4,31],[4,32],[4,33],[4,34],[4,35],[4,36],[4,37],[4,38],[4,39],[4,40],[4,41],[4,42],[4,43],[4,44],[6,0],[6,1],[6,2],[6,5],[6,6],[6,7],[6,10],[6,11],[6,12],[6,15],[6,16],[6,17],[6,20],[6,21],[6,22],[6,25],[6,26],[6,27],[6,30],[6,31],[6,32],[6,35],[6,36],[6,37],[6,40],[6,41],[6,42],[7,2],[7,3],[7,7],[7,8],[7,12],[7,13],[7,17],[7,18],[7,22],[7,23],[7,27],[7,28],[7,32],[7,33],[7,37],[7,38],[7,42],[7,43],[8,0],[8,1],[8,2],[8,5],[8,6],[8,7],[8,10],[8,11],[8,12],[8,15],[8,16],[8,17],[8,20],[8,21],[8,22],[8,25],[8,26],[8,27],[8,30],[8,31],[8,32],[8,35],[8,36],[8,37],[8,40],[8,41],[8,42],[10,0],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[10,11],[10,12],[10,13],[10,14],[10,15],[10,16],[10,17],[10,18],[10,19],[10,20],[10,21],[10,22],[10,23],[10,24],[10,25],[10,26],[10,27],[10,28],[10,29],[10,30],[10,31],[10,32],[10,33],[10,34],[10,35],[10,36],[10,37],[10,38],[10,39],[10,40],[10,41],[10,42],[10,43],[10,44],[11,0],[11,3],[11,6],[11,9],[11,12],[11,15],[11,18],[11,21],[11,24],[11,27],[11,30],[11,33],[11,36],[11,39],[11,42],[15,12],[15,13],[15,20],[15,21],[15,31],[15,32],[16,12],[16,13],[16,20],[16,21],[16,31],[16,32],[17,12],[17,32],[18,13],[18,15],[18,19],[18,20],[18,21],[18,23],[18,24],[18,25],[18,27],[18,28],[18,29],[18,31],[19,15],[19,20],[19,23],[19,27],[20,15],[20,20],[20,23],[20,24],[20,25],[20,27],[20,28],[20,29],[21,15],[21,20],[21,23],[21,27],[22,15],[22,16],[22,17],[22,19],[22,20],[22,21],[22,23],[22,27],[22,28],[22,29],[26,28],[26,29]]
// or (with 2 residues)
// [[0,27],[0,28],[3,0],[3,3],[3,6],[3,9],[3,12],[3,15],[3,18],[3,21],[3,24],[3,27],[3,30],[3,33],[3,36],[3,39],[3,42],[4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],[4,9],[4,10],[4,11],[4,12],[4,13],[4,14],[4,15],[4,16],[4,17],[4,18],[4,19],[4,20],[4,21],[4,22],[4,23],[4,24],[4,25],[4,26],[4,27],[4,28],[4,29],[4,30],[4,31],[4,32],[4,33],[4,34],[4,35],[4,36],[4,37],[4,38],[4,39],[4,40],[4,41],[4,42],[4,43],[4,44],[6,0],[6,1],[6,2],[6,5],[6,6],[6,7],[6,10],[6,11],[6,12],[6,15],[6,16],[6,17],[6,20],[6,21],[6,22],[6,25],[6,26],[6,27],[6,30],[6,31],[6,32],[6,35],[6,36],[6,37],[6,40],[6,41],[6,42],[7,2],[7,3],[7,7],[7,8],[7,12],[7,13],[7,17],[7,18],[7,22],[7,23],[7,27],[7,28],[7,32],[7,33],[7,37],[7,38],[7,42],[7,43],[8,0],[8,1],[8,2],[8,5],[8,6],[8,7],[8,10],[8,11],[8,12],[8,15],[8,16],[8,17],[8,20],[8,21],[8,22],[8,25],[8,26],[8,27],[8,30],[8,31],[8,32],[8,35],[8,36],[8,37],[8,40],[8,41],[8,42],[10,0],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[10,11],[10,12],[10,13],[10,14],[10,15],[10,16],[10,17],[10,18],[10,19],[10,20],[10,21],[10,22],[10,23],[10,24],[10,25],[10,26],[10,27],[10,28],[10,29],[10,30],[10,31],[10,32],[10,33],[10,34],[10,35],[10,36],[10,37],[10,38],[10,39],[10,40],[10,41],[10,42],[10,43],[10,44],[11,0],[11,3],[11,6],[11,9],[11,12],[11,15],[11,18],[11,21],[11,24],[11,27],[11,30],[11,33],[11,36],[11,39],[11,42],[15,11],[15,12],[15,21],[15,22],[15,32],[15,33],[16,11],[16,12],[16,21],[16,22],[16,32],[16,33],[17,11],[17,33],[18,12],[18,15],[18,19],[18,20],[18,21],[18,23],[18,24],[18,25],[18,27],[18,28],[18,29],[18,32],[19,15],[19,20],[19,23],[19,27],[20,15],[20,20],[20,23],[20,24],[20,25],[20,27],[20,28],[20,29],[21,15],[21,20],[21,23],[21,27],[22,15],[22,16],[22,17],[22,19],[22,20],[22,21],[22,23],[22,27],[22,28],[22,29],[26,27],[26,28]]
// or (with 3 residues)
// [[0,0],[0,3],[0,6],[0,9],[0,12],[0,15],[0,18],[0,21],[0,24],[0,27],[0,30],[0,33],[0,36],[0,39],[0,42],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[1,18],[1,19],[1,20],[1,21],[1,22],[1,23],[1,24],[1,25],[1,26],[1,27],[1,28],[1,29],[1,30],[1,31],[1,32],[1,33],[1,34],[1,35],[1,36],[1,37],[1,38],[1,39],[1,40],[1,41],[1,42],[1,43],[1,44],[3,0],[3,1],[3,2],[3,5],[3,6],[3,7],[3,10],[3,11],[3,12],[3,15],[3,16],[3,17],[3,20],[3,21],[3,22],[3,25],[3,26],[3,27],[3,30],[3,31],[3,32],[3,35],[3,36],[3,37],[3,40],[3,41],[3,42],[4,2],[4,3],[4,7],[4,8],[4,12],[4,13],[4,17],[4,18],[4,22],[4,23],[4,27],[4,28],[4,32],[4,33],[4,37],[4,38],[4,42],[4,43],[5,0],[5,1],[5,2],[5,5],[5,6],[5,7],[5,10],[5,11],[5,12],[5,15],[5,16],[5,17],[5,20],[5,21],[5,22],[5,25],[5,26],[5,27],[5,30],[5,31],[5,32],[5,35],[5,36],[5,37],[5,40],[5,41],[5,42],[7,0],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],[7,9],[7,10],[7,11],[7,12],[7,13],[7,14],[7,15],[7,16],[7,17],[7,18],[7,19],[7,20],[7,21],[7,22],[7,23],[7,24],[7,25],[7,26],[7,27],[7,28],[7,29],[7,30],[7,31],[7,32],[7,33],[7,34],[7,35],[7,36],[7,37],[7,38],[7,39],[7,40],[7,41],[7,42],[7,43],[7,44],[8,0],[8,3],[8,6],[8,9],[8,12],[8,15],[8,18],[8,21],[8,24],[8,27],[8,30],[8,33],[8,36],[8,39],[8,42],[12,11],[12,12],[12,21],[12,22],[12,32],[12,33],[13,11],[13,12],[13,21],[13,22],[13,32],[13,33],[14,11],[14,33],[15,12],[15,15],[15,19],[15,20],[15,21],[15,23],[15,24],[15,25],[15,27],[15,28],[15,29],[15,32],[16,15],[16,20],[16,23],[16,27],[17,15],[17,20],[17,23],[17,24],[17,25],[17,27],[17,28],[17,29],[18,15],[18,20],[18,23],[18,27],[19,15],[19,16],[19,17],[19,19],[19,20],[19,21],[19,23],[19,27],[19,28],[19,29],[22,27],[22,28],[23,27],[23,28]]

// Life devolves to a single glider...
setWithCategory('Marquee, Life -> glider', 'demo', [
	[0, 0],
	[0, 3],
	[0, 6],
	[0, 9],
	[0, 12],
	[0, 15],
	[0, 18],
	[0, 21],
	[0, 24],
	[0, 27],
	[0, 30],
	[0, 33],
	[0, 36],
	[0, 39],
	[0, 42],
	[1, 0],
	[1, 1],
	[1, 2],
	[1, 3],
	[1, 4],
	[1, 5],
	[1, 6],
	[1, 7],
	[1, 8],
	[1, 9],
	[1, 10],
	[1, 11],
	[1, 12],
	[1, 13],
	[1, 14],
	[1, 15],
	[1, 16],
	[1, 17],
	[1, 18],
	[1, 19],
	[1, 20],
	[1, 21],
	[1, 22],
	[1, 23],
	[1, 24],
	[1, 25],
	[1, 26],
	[1, 27],
	[1, 28],
	[1, 29],
	[1, 30],
	[1, 31],
	[1, 32],
	[1, 33],
	[1, 34],
	[1, 35],
	[1, 36],
	[1, 37],
	[1, 38],
	[1, 39],
	[1, 40],
	[1, 41],
	[1, 42],
	[1, 43],
	[1, 44],
	[3, 0],
	[3, 1],
	[3, 2],
	[3, 5],
	[3, 6],
	[3, 7],
	[3, 10],
	[3, 11],
	[3, 12],
	[3, 15],
	[3, 16],
	[3, 17],
	[3, 20],
	[3, 21],
	[3, 22],
	[3, 25],
	[3, 26],
	[3, 27],
	[3, 30],
	[3, 31],
	[3, 32],
	[3, 35],
	[3, 36],
	[3, 37],
	[3, 40],
	[3, 41],
	[3, 42],
	[4, 2],
	[4, 3],
	[4, 7],
	[4, 8],
	[4, 12],
	[4, 13],
	[4, 17],
	[4, 18],
	[4, 22],
	[4, 23],
	[4, 27],
	[4, 28],
	[4, 32],
	[4, 33],
	[4, 37],
	[4, 38],
	[4, 42],
	[4, 43],
	[5, 0],
	[5, 1],
	[5, 2],
	[5, 5],
	[5, 6],
	[5, 7],
	[5, 10],
	[5, 11],
	[5, 12],
	[5, 15],
	[5, 16],
	[5, 17],
	[5, 20],
	[5, 21],
	[5, 22],
	[5, 25],
	[5, 26],
	[5, 27],
	[5, 30],
	[5, 31],
	[5, 32],
	[5, 35],
	[5, 36],
	[5, 37],
	[5, 40],
	[5, 41],
	[5, 42],
	[7, 0],
	[7, 1],
	[7, 2],
	[7, 3],
	[7, 4],
	[7, 5],
	[7, 6],
	[7, 7],
	[7, 8],
	[7, 9],
	[7, 10],
	[7, 11],
	[7, 12],
	[7, 13],
	[7, 14],
	[7, 15],
	[7, 16],
	[7, 17],
	[7, 18],
	[7, 19],
	[7, 20],
	[7, 21],
	[7, 22],
	[7, 23],
	[7, 24],
	[7, 25],
	[7, 26],
	[7, 27],
	[7, 28],
	[7, 29],
	[7, 30],
	[7, 31],
	[7, 32],
	[7, 33],
	[7, 34],
	[7, 35],
	[7, 36],
	[7, 37],
	[7, 38],
	[7, 39],
	[7, 40],
	[7, 41],
	[7, 42],
	[7, 43],
	[7, 44],
	[8, 0],
	[8, 3],
	[8, 6],
	[8, 9],
	[8, 12],
	[8, 15],
	[8, 18],
	[8, 21],
	[8, 24],
	[8, 27],
	[8, 30],
	[8, 33],
	[8, 36],
	[8, 39],
	[8, 42],
	[12, 11],
	[12, 12],
	[12, 21],
	[12, 22],
	[12, 32],
	[12, 33],
	[13, 11],
	[13, 12],
	[13, 21],
	[13, 22],
	[13, 32],
	[13, 33],
	[14, 11],
	[14, 33],
	[15, 12],
	[15, 15],
	[15, 19],
	[15, 20],
	[15, 21],
	[15, 23],
	[15, 24],
	[15, 25],
	[15, 27],
	[15, 28],
	[15, 29],
	[15, 32],
	[16, 15],
	[16, 20],
	[16, 23],
	[16, 27],
	[17, 15],
	[17, 20],
	[17, 23],
	[17, 24],
	[17, 25],
	[17, 27],
	[17, 28],
	[17, 29],
	[18, 11],
	[18, 15],
	[18, 20],
	[18, 23],
	[18, 27],
	[18, 33],
	[19, 11],
	[19, 12],
	[19, 15],
	[19, 16],
	[19, 17],
	[19, 19],
	[19, 20],
	[19, 21],
	[19, 23],
	[19, 27],
	[19, 28],
	[19, 29],
	[19, 32],
	[19, 33],
	[22, 27],
	[22, 28],
	[23, 27],
	[23, 28],
])
